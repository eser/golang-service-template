// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v5.27.1
// source: broadcast/broadcast.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "broadcast";

export enum SendResultType {
  SUCCESS = 0,
  ERROR = 1,
  UNRECOGNIZED = -1,
}

export function sendResultTypeFromJSON(object: any): SendResultType {
  switch (object) {
    case 0:
    case "SUCCESS":
      return SendResultType.SUCCESS;
    case 1:
    case "ERROR":
      return SendResultType.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SendResultType.UNRECOGNIZED;
  }
}

export function sendResultTypeToJSON(object: SendResultType): string {
  switch (object) {
    case SendResultType.SUCCESS:
      return "SUCCESS";
    case SendResultType.ERROR:
      return "ERROR";
    case SendResultType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Channel {
  readonly id: string;
  readonly name: string;
}

export interface Channels {
  readonly channels: readonly Channel[];
}

export interface GetByIdRequest {
  readonly id?: string | null | undefined;
}

export interface ListRequest {
}

export interface Message {
  readonly body: string;
}

export interface SendRequest {
  readonly channelId: string;
  readonly message: Message | null;
}

export interface SendResponse {
  readonly result: SendResultType;
  readonly error?: string | null | undefined;
}

function createBaseChannel(): Channel {
  return { id: "", name: "" };
}

export const Channel: MessageFns<Channel> = {
  encode(message: Channel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Channel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannel() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Channel {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Channel): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Channel>, I>>(base?: I): Channel {
    return Channel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Channel>, I>>(object: I): Channel {
    const message = createBaseChannel() as any;
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseChannels(): Channels {
  return { channels: [] };
}

export const Channels: MessageFns<Channels> = {
  encode(message: Channels, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.channels) {
      Channel.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Channels {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannels() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channels.push(Channel.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Channels {
    return {
      channels: globalThis.Array.isArray(object?.channels) ? object.channels.map((e: any) => Channel.fromJSON(e)) : [],
    };
  },

  toJSON(message: Channels): unknown {
    const obj: any = {};
    if (message.channels?.length) {
      obj.channels = message.channels.map((e) => Channel.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Channels>, I>>(base?: I): Channels {
    return Channels.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Channels>, I>>(object: I): Channels {
    const message = createBaseChannels() as any;
    message.channels = object.channels?.map((e) => Channel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetByIdRequest(): GetByIdRequest {
  return { id: null };
}

export const GetByIdRequest: MessageFns<GetByIdRequest> = {
  encode(message: GetByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== null) {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetByIdRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : null };
  },

  toJSON(message: GetByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== null) {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetByIdRequest>, I>>(base?: I): GetByIdRequest {
    return GetByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetByIdRequest>, I>>(object: I): GetByIdRequest {
    const message = createBaseGetByIdRequest() as any;
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseListRequest(): ListRequest {
  return {};
}

export const ListRequest: MessageFns<ListRequest> = {
  encode(_: ListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListRequest {
    return {};
  },

  toJSON(_: ListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRequest>, I>>(base?: I): ListRequest {
    return ListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRequest>, I>>(_: I): ListRequest {
    const message = createBaseListRequest() as any;
    return message;
  },
};

function createBaseMessage(): Message {
  return { body: "" };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.body !== "") {
      writer.uint32(10).string(message.body);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.body = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return { body: isSet(object.body) ? globalThis.String(object.body) : "" };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.body !== "") {
      obj.body = message.body;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage() as any;
    message.body = object.body ?? "";
    return message;
  },
};

function createBaseSendRequest(): SendRequest {
  return { channelId: "", message: null };
}

export const SendRequest: MessageFns<SendRequest> = {
  encode(message: SendRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channelId !== "") {
      writer.uint32(10).string(message.channelId);
    }
    if (message.message !== undefined && message.message !== null) {
      Message.encode(message.message, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendRequest {
    return {
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
      message: isSet(object.message) ? Message.fromJSON(object.message) : null,
    };
  },

  toJSON(message: SendRequest): unknown {
    const obj: any = {};
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.message !== undefined && message.message !== null) {
      obj.message = Message.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendRequest>, I>>(base?: I): SendRequest {
    return SendRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendRequest>, I>>(object: I): SendRequest {
    const message = createBaseSendRequest() as any;
    message.channelId = object.channelId ?? "";
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : null;
    return message;
  },
};

function createBaseSendResponse(): SendResponse {
  return { result: 0, error: null };
}

export const SendResponse: MessageFns<SendResponse> = {
  encode(message: SendResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    if (message.error !== undefined && message.error !== null) {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendResponse {
    return {
      result: isSet(object.result) ? sendResultTypeFromJSON(object.result) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : null,
    };
  },

  toJSON(message: SendResponse): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = sendResultTypeToJSON(message.result);
    }
    if (message.error !== undefined && message.error !== null) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendResponse>, I>>(base?: I): SendResponse {
    return SendResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendResponse>, I>>(object: I): SendResponse {
    const message = createBaseSendResponse() as any;
    message.result = object.result ?? 0;
    message.error = object.error ?? undefined;
    return message;
  },
};

export type ChannelServiceService = typeof ChannelServiceService;
export const ChannelServiceService = {
  getById: {
    path: "/broadcast.ChannelService/GetById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetByIdRequest) => Buffer.from(GetByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetByIdRequest.decode(value),
    responseSerialize: (value: Channel) => Buffer.from(Channel.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Channel.decode(value),
  },
  list: {
    path: "/broadcast.ChannelService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListRequest) => Buffer.from(ListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListRequest.decode(value),
    responseSerialize: (value: Channels) => Buffer.from(Channels.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Channels.decode(value),
  },
} as const;

export interface ChannelServiceServer extends UntypedServiceImplementation {
  getById: handleUnaryCall<GetByIdRequest, Channel>;
  list: handleUnaryCall<ListRequest, Channels>;
}

export interface ChannelServiceClient extends Client {
  getById(request: GetByIdRequest, callback: (error: ServiceError | null, response: Channel) => void): ClientUnaryCall;
  getById(
    request: GetByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Channel) => void,
  ): ClientUnaryCall;
  getById(
    request: GetByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Channel) => void,
  ): ClientUnaryCall;
  list(request: ListRequest, callback: (error: ServiceError | null, response: Channels) => void): ClientUnaryCall;
  list(
    request: ListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Channels) => void,
  ): ClientUnaryCall;
  list(
    request: ListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Channels) => void,
  ): ClientUnaryCall;
}

export const ChannelServiceClient = makeGenericClientConstructor(
  ChannelServiceService,
  "broadcast.ChannelService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ChannelServiceClient;
  service: typeof ChannelServiceService;
  serviceName: string;
};

export type MessageServiceService = typeof MessageServiceService;
export const MessageServiceService = {
  send: {
    path: "/broadcast.MessageService/Send",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendRequest) => Buffer.from(SendRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendRequest.decode(value),
    responseSerialize: (value: SendResponse) => Buffer.from(SendResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SendResponse.decode(value),
  },
} as const;

export interface MessageServiceServer extends UntypedServiceImplementation {
  send: handleUnaryCall<SendRequest, SendResponse>;
}

export interface MessageServiceClient extends Client {
  send(request: SendRequest, callback: (error: ServiceError | null, response: SendResponse) => void): ClientUnaryCall;
  send(
    request: SendRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SendResponse) => void,
  ): ClientUnaryCall;
  send(
    request: SendRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SendResponse) => void,
  ): ClientUnaryCall;
}

export const MessageServiceClient = makeGenericClientConstructor(
  MessageServiceService,
  "broadcast.MessageService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MessageServiceClient;
  service: typeof MessageServiceService;
  serviceName: string;
};

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
