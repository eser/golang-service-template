// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dmls.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
insert into "user" (github_remote_id, name, email)
values ($1, $2, $3) returning id, kind, name, email, phone, github_handle, x_handle, created_at, updated_at, deleted_at, github_remote_id, x_remote_id, individual_profile_id
`

type CreateUserParams struct {
	GithubRemoteId sql.NullString
	Name           string
	Email          sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.GithubRemoteId, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Kind,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.GithubHandle,
		&i.XHandle,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.GithubRemoteId,
		&i.XRemoteId,
		&i.IndividualProfileId,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execresult
update "user"
set deleted_at = CURRENT_TIMESTAMP
where id = $1 and deleted_at is null
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const getUserByGithubRemoteId = `-- name: GetUserByGithubRemoteId :one
select id, kind, name, email, phone, github_handle, x_handle, created_at, updated_at, deleted_at, github_remote_id, x_remote_id, individual_profile_id from "user"
where github_remote_id = $1 and deleted_at is null
`

func (q *Queries) GetUserByGithubRemoteId(ctx context.Context, githubRemoteID sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGithubRemoteId, githubRemoteID)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Kind,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.GithubHandle,
		&i.XHandle,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.GithubRemoteId,
		&i.XRemoteId,
		&i.IndividualProfileId,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, kind, name, email, phone, github_handle, x_handle, created_at, updated_at, deleted_at, github_remote_id, x_remote_id, individual_profile_id from "user"
where id = $1 and deleted_at is null
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.Id,
		&i.Kind,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.GithubHandle,
		&i.XHandle,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.GithubRemoteId,
		&i.XRemoteId,
		&i.IndividualProfileId,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
select id, kind, name, email, phone, github_handle, x_handle, created_at, updated_at, deleted_at, github_remote_id, x_remote_id, individual_profile_id from "user"
where deleted_at is null
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Id,
			&i.Kind,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.GithubHandle,
			&i.XHandle,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.GithubRemoteId,
			&i.XRemoteId,
			&i.IndividualProfileId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execresult
update "user"
set name = $2, email = $3
where id = $1 and deleted_at is null
`

type UpdateUserParams struct {
	Id    string
	Name  string
	Email sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser, arg.Id, arg.Name, arg.Email)
}
