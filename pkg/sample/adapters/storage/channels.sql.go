// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: channels.sql

package storage

import (
	"context"
	"database/sql"
	"errors"
	"github.com/eser/go-service/pkg/sample/business/channels"
)

const createChannel = `-- name: CreateChannel :one
insert into "channel" (id, name)
values ($1, $2) returning id, name
`

type CreateChannelParams struct {
	Id   string         `json:"id"`
	Name sql.NullString `json:"name"`
}

// CreateChannel
//
//	insert into "channel" (id, name)
//	values ($1, $2) returning id, name
func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (*channels.Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel, arg.Id, arg.Name)
	var i channels.Channel
	err := row.Scan(&i.Id, &i.Name)
	if err != nil && errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}
	return &i, err
}

const deleteChannel = `-- name: DeleteChannel :execrows
delete from "channel"
where id = $1
`

// DeleteChannel
//
//	delete from "channel"
//	where id = $1
func (q *Queries) DeleteChannel(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteChannel, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getChannelById = `-- name: GetChannelById :one
select id, name from "channel"
where id = $1
`

// GetChannelById
//
//	select id, name from "channel"
//	where id = $1
func (q *Queries) GetChannelById(ctx context.Context, id string) (*channels.Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelById, id)
	var i channels.Channel
	err := row.Scan(&i.Id, &i.Name)
	if err != nil && errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}
	return &i, err
}

const getChannelByName = `-- name: GetChannelByName :one
select id, name from "channel"
where name = $1
`

// GetChannelByName
//
//	select id, name from "channel"
//	where name = $1
func (q *Queries) GetChannelByName(ctx context.Context, name sql.NullString) (*channels.Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByName, name)
	var i channels.Channel
	err := row.Scan(&i.Id, &i.Name)
	if err != nil && errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}
	return &i, err
}

const listChannels = `-- name: ListChannels :many
select id, name from "channel"
`

// ListChannels
//
//	select id, name from "channel"
func (q *Queries) ListChannels(ctx context.Context) ([]*channels.Channel, error) {
	rows, err := q.db.QueryContext(ctx, listChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*channels.Channel{}
	for rows.Next() {
		var i channels.Channel
		if err := rows.Scan(&i.Id, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannel = `-- name: UpdateChannel :execrows
update "channel"
set name = $2
where id = $1
`

type UpdateChannelParams struct {
	Id   string         `json:"id"`
	Name sql.NullString `json:"name"`
}

// UpdateChannel
//
//	update "channel"
//	set name = $2
//	where id = $1
func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateChannel, arg.Id, arg.Name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
