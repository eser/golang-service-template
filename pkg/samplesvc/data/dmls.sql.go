// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dmls.sql

package data

import (
	"context"
	"database/sql"
)

const createChannel = `-- name: CreateChannel :one
insert into "channel" (id, name)
values ($1, $2) returning id, name
`

type CreateChannelParams struct {
	Id   string         `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel, arg.Id, arg.Name)
	var i Channel
	err := row.Scan(&i.Id, &i.Name)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :execresult
delete from "channel"
where id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteChannel, id)
}

const getChannelById = `-- name: GetChannelById :one
select id, name from "channel"
where id = $1
`

func (q *Queries) GetChannelById(ctx context.Context, id string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelById, id)
	var i Channel
	err := row.Scan(&i.Id, &i.Name)
	return i, err
}

const getChannelByName = `-- name: GetChannelByName :one
select id, name from "channel"
where name = $1
`

func (q *Queries) GetChannelByName(ctx context.Context, name sql.NullString) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByName, name)
	var i Channel
	err := row.Scan(&i.Id, &i.Name)
	return i, err
}

const listChannels = `-- name: ListChannels :many
select id, name from "channel"
`

func (q *Queries) ListChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, listChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Channel{}
	for rows.Next() {
		var i Channel
		if err := rows.Scan(&i.Id, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannel = `-- name: UpdateChannel :execresult
update "channel"
set name = $2
where id = $1
`

type UpdateChannelParams struct {
	Id   string         `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateChannel, arg.Id, arg.Name)
}
